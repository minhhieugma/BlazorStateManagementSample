@page "/fetchdata"
@inject WeatherForecastService ForecastService
@inject IState<WeatherState> WeatherState
@using BlazorSSR.Data
@using BlazorSSR.Store.WeatherUseCase
@using Fluxor
@using BlazorSSR.Store
@inherits BaseComponent

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (WeatherState.Value.Forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in WeatherState.Value.Forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        WeatherState.StateChanged += WeatherStateOnStateChanged;

        var fetchDataAction = new FetchDataAction();
        Dispatcher.Dispatch(fetchDataAction);
    }

    private async void WeatherStateOnStateChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

}