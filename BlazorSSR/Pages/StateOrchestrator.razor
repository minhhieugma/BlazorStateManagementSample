@page "/stages"
@using BlazorSSR.Store.StageUseCase
@inherits BaseComponent
@inject IState<StageState> StageState

<PageTitle>Stage @StageState.Value.Trails?.LastOrDefault()</PageTitle>


<StateViewer/>


@if (StageState.Value.Trails.Length == 0)
{
    <button class="btn btn-primary"
            @onclick="@(() => Dispatcher.Dispatch(new AddTrailAction { Trail = { Type = typeof(Login) } }))">
        Sign In
    </button>
}
else
{
    var currentStage = StageState.Value.Trails.Last();


    <DynamicComponent Type="currentStage.Type"
                      Parameters="currentStage.ComponentParameters"/>
}


@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        StageState.StateChanged += StageStateOnStateChanged;
    }

    private void StageStateOnStateChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        StageState.StateChanged -= StageStateOnStateChanged;
    }

}