@page "/session-selector"
@using Blazored.LocalStorage
@using BlazorSSR.Store.StageUseCase
@using BlazorSSR.Store.Storage
@using Microsoft.AspNetCore.WebUtilities
@inherits BaseComponent
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

@inject IState<StageState> StageState

<MobileLayout
    LayoutTitle="Session Selector"
    ShowFooter="true"
    ShowRightButton="false"
    ShowLeftButton="false">


    <ChildContent>

        <div class="mb-3">
            <div class="list-group">
                @foreach (var session in _sessions.OrderByDescending(p => p.LastModified))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-start
                        list-group-item-action @(session.SessionId == _selectedSession?.SessionId ? "active" : "")"
                        @onclick="@(() => ItemSelected(session))">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">@session.LastModified</div>
                            @session.SessionId
                        </div>
                        @* <span class="badge bg-primary rounded-pill">14</span> *@
                    </li>
                }
            </div>
        </div>
    </ChildContent>
    <FooterContent>

        <div class="d-flex">
            <div class="p-2">
                <button type="button" class="btn btn-sm btn-light"
                        @onclick="CreateNewSession">
                    New Session
                </button>
            </div>
        </div>
    </FooterContent>
</MobileLayout>


@code
{
    private MultiLocalStateStorage.Session[] _sessions = { };

    private MultiLocalStateStorage.Session? _selectedSession;

    private void CreateNewSession()
    {
        NavigateToSessionId(Guid.NewGuid().ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _sessions = await LocalStorageService.GetItemAsync<MultiLocalStateStorage.Session[]>("sessions");
            _sessions ??= Array.Empty<MultiLocalStateStorage.Session>();

            if (_sessions.Any() == false)
            {
                CreateNewSession();
                return;
            }

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ItemSelected(MultiLocalStateStorage.Session session)
    {
        _selectedSession = session;

        NavigateToSessionId(session.SessionId);
    }

    private void NavigateToSessionId(string sessionId)
    {
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri, "session", sessionId), true);
    }
}