@using Fluxor.Persist.Storage.Store
@inherits Fluxor.Persist.Storage.BaseComponent
@inject IState<HistoryStackState> StageState

<PageTitle>Fluxor.Persist.Blazor.Sample</PageTitle>


@if (ShowHeader)
{
    <div class="mobile-header">
        <div class="d-flex">

            <div class="p-2 w-25">
                @if (ShowLeftButton)
                {
                    <button type="button" class="btn btn-sm btn-light"
                            @onclick="@(() => Dispatcher.Dispatch(new ButtonClickedAction { }))">
                        @LeftButtonTitle
                    </button>
                }
            </div>
            <div class="p-2 flex-grow-1 text-center">@LayoutTitle</div>

            <div class="p-2 w-25">
                @if (ShowRightButton)
                {
                    <button type="button" class="btn btn-sm btn-light"
                            @onclick="@(() => Dispatcher.Dispatch(new ButtonClickedAction { }))">
                        @RightButtonTitle
                    </button>
                }

            </div>

        </div>
    </div>
}

<div class="mobile-body @BodyAdditionalClasses">
    @ChildContent
</div>

@if (ShowFooter)
{
    <div class="mobile-footer">

        @FooterContent
    </div>
}

@code
{
    [Parameter]
    public bool ShowHeader { get; set; } = true;

    [Parameter]
    public bool ShowFooter { get; set; } = true;

    [Parameter]
    public bool ShowLeftButton { get; set; } = true;

    [Parameter]
    public bool ShowRightButton { get; set; } = true;

    [Parameter]
    public string LeftButtonTitle { get; set; } = "Back";

    [Parameter]
    public string RightButtonTitle { get; set; } = "Next";

    [Parameter]
    public string LayoutTitle { get; set; } = "Flex item";

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;


    [Parameter]
    public RenderFragment FooterContent { get; set; } = default!;

    private string BodyAdditionalClasses
    {
        get
        {
            if (ShowHeader && ShowFooter)
                return "mobile-body-header-and-footer";

            if (ShowHeader || ShowFooter)
                return "mobile-body-header-or-footer";

            return "mobile-body-full-screen";
        }
    }
}