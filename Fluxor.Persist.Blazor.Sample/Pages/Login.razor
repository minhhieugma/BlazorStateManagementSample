@using Fluxor.Persist.Storage.Store
@using Fluxor.Persist.Storage.Store.Action
@inherits Fluxor.Persist.Storage.BaseComponent
@inject IState<HistoryStackState> StageState


<MobileLayout
    ShowHeader="false"
    ShowFooter="false"
    ShowLeftButton="false"
    ShowRightButton="false">


    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Email address</label>
        <input type="email" class="form-control"
               id="exampleFormControlInput1" placeholder="name@example.com"
               @bind="EmailAddress"
               @bind:after="UpdateCurrentStage">
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Country</label>
        <div class="dropdown">
            <button class="btn btn-warning dropdown-toggle w-100"
                    type="button" data-bs-toggle="dropdown" aria-expanded="false"
                    @onclick="CountryDropdownClicked">

                @(StageState.Value.PayloadAs<SimplePayload>().CountryCode)
            </button>
        </div>
    </div>

    <div class="mb-3">

        <button type="button" class="btn btn-primary" @onclick="LoginAsync">Submit</button>
    </div>
</MobileLayout>


@code{

    [Parameter]
    public string? EmailAddress { get; set; }

    private void CountryDropdownClicked()
    {
        Dispatcher.Dispatch(new AddTrailAction
        {
            Trail =
            {
                Type = typeof(CountrySelector),
                ComponentParameters = new Dictionary<string, object>
                {
                    { nameof(CountrySelector.SelectedValue), StageState.Value.PayloadAs<SimplePayload>().CountryCode }
                }
            }
        });
    }

    private void UpdateCurrentStage()
    {
        Dispatcher.Dispatch(new UpdateTrailAction
        {
            Trail =
            {
                Type = typeof(Login),
                ComponentParameters = new Dictionary<string, object> { { nameof(EmailAddress), EmailAddress ?? "" } }
            }
        });
    }

    private void CloseButtonClicked()
    {
        Dispatcher.Dispatch(new ClearStagesAction());
    }

    private void LoginAsync()
    {
        Dispatcher.Dispatch(new AddTrailAction { Trail = { Type = typeof(CommentList) } });
    }

}