@using BlazorSSR.Store.WeatherUseCase
@using Fluxor.Persist.Storage.Store.Action
@inherits Fluxor.Persist.Storage.BaseComponent
@inject IState<WeatherState> WeatherState

<MobileLayout
    LayoutTitle="Weather Forecast"
    ShowFooter="true"
    ShowRightButton="false"
    LeftButtonTitle="Back">

    @if (WeatherState.Value.Forecasts == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in WeatherState.Value.Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </table>
    }
</MobileLayout>

@code{

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ActionSubscriber.SubscribeToAction<ButtonClickedAction>(this, action => { Dispatcher.Dispatch(new BackStageAction()); });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        WeatherState.StateChanged += WeatherStateOnStateChanged;

        var fetchDataAction = new FetchDataAction();
        Dispatcher.Dispatch(fetchDataAction);
    }

    private async void WeatherStateOnStateChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

}